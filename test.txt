

// Add callback path handler for authentication redirection
app.MapGet("/callback", async (HttpContext context, IConfiguration config, Dictionary<string, string> tokenStore) =>
{
    var sessionId = context.Request.Query["state"].ToString(); // passed from original SSE -> sign-in link
    if (string.IsNullOrEmpty(sessionId))
    {
        return Results.BadRequest("Session is not initialized.");
    }
    
    var code = context.Request.Query["code"].ToString();
    var sessionState = context.Request.Query["session_state"].ToString();

    if (string.IsNullOrEmpty(code))
    {
        return Results.BadRequest("Authorization code not found in the request");
    }

    var httpClient = new HttpClient();
    var tenantId = config["AzureAd:TenantId"] ?? "";
    var clientId = config["AzureAd:ClientId"] ?? "";
    var clientSecret = config["AzureAd:ClientSecret"] ?? "";
    var redirectUri = "http://localhost:3001/callback";

    var tokenEndpoint = $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token";

    var formContent = new FormUrlEncodedContent(new[]
    {
        new KeyValuePair<string, string>("grant_type", "authorization_code"),
        new KeyValuePair<string, string>("code", code),
        new KeyValuePair<string, string>("redirect_uri", redirectUri),
        new KeyValuePair<string, string>("client_id", clientId),
        new KeyValuePair<string, string>("client_secret", clientSecret),
        new KeyValuePair<string, string>("scope", "openid profile email offline_access")
    });

    try
    {
        var response = await httpClient.PostAsync(tokenEndpoint, formContent);
        var content = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = JsonSerializer.Deserialize<JsonElement>(content);

            var accessToken = tokenResponse.GetProperty("access_token").GetString();
            var refreshToken = tokenResponse.TryGetProperty("refresh_token", out var rt) ? rt.GetString() : null;
            var idToken = tokenResponse.TryGetProperty("id_token", out var it) ? it.GetString() : null;

            if (accessToken != null)
            {
                if (!string.IsNullOrEmpty(sessionId))
                {
                    TokenStore.SaveToken(sessionId, new UserTokenInfo
                    {
                        AccessToken = accessToken,
                        RefreshToken = refreshToken ?? "",
                        IdToken = idToken ?? "",
                        Expiry = DateTime.UtcNow.AddSeconds(tokenResponse.GetProperty("expires_in").GetInt32())
                    });
                }
            }

            return Results.Content("<html><body><h1>Authentication Successful</h1><p>Access token has been stored.</p></body></html>", "text/html");
        }
        else
        {
            return Results.Content($"<html><body><h1>Error Exchanging Code</h1><pre>{content}</pre></body></html>", "text/html");
        }
    }
    catch (Exception ex)
    {
        return Results.Content($"<html><body><h1>Error Processing Auth Code</h1><p>{ex.Message}</p></body></html>", "text/html");
    }
});



// Program.cs
using ModelContextProtocol.Server;
using System.ComponentModel;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Identity.Web;
using Microsoft.AspNetCore.Authorization;
using System.IdentityModel.Tokens.Jwt;
using System.Net.Http;
using System.Text.Json;
using System.Net.Http.Json;
using Azure.Identity;
using System.Collections.Generic;
using McpBlobServer;
using ModelContextProtocol.Protocol.Transport;

var builder = WebApplication.CreateBuilder(args);
builder.WebHost.ConfigureKestrel(options =>
{
    options.ListenLocalhost(3001);
});

// Initialize the global configuration
AppSettings.Initialize(builder.Configuration);

builder.Services.AddMcpServer().WithTools<LearnFromYourMistakesTool>().WithTools<EchoTool>().WithTools<ToAzureBlobTool>().WithTools<EntraSignInUrlTool>();

// Add a singleton dictionary to store tokens
builder.Services.AddSingleton<Dictionary<string, string>>(new Dictionary<string, string>());

var app = builder.Build();

app.Use(async (context, next) =>
{
    McpBlobServer.HttpContextAccessor.Current = context;
    try
    {
        await next();
    }
    finally
    {
        McpBlobServer.HttpContextAccessor.Current = null; // clean up
    }
});

app.MapMcp(
    runSessionAsync: async (context, mcpServer, ct) =>
    {
        Console.WriteLine($"authz: {context.Request.Headers["user_access_token"].ToString()}");
        // For the SSE endpoint, the session ID is created in MapMcp method and 
        // should be accessible from the request URL or query string
        var requestPath = context.Request.Path.ToString();
        
        var sessionId = "";
        // Try to get session ID directly from query string
        if (context != null && context.Request.Query.ContainsKey("sessionId"))
        {
           sessionId = context.Request.Query["sessionId"].ToString();
        } 
        
        // If not in query string, try to extract from query path
        if (string.IsNullOrEmpty(sessionId) && context.Items.TryGetValue("SessionId", out var sessionIdObj))
        {
            sessionId = sessionIdObj?.ToString();
        }
        
        // Add SessionId to CurrentSession for later use
        if (!string.IsNullOrEmpty(sessionId))
        {
            Console.WriteLine($"Session started with ID: {sessionId}");
            McpBlobServer.CurrentSession.SessionId = sessionId;
        }
        else
        {
            // Create a session ID based on connection details if we couldn't find it
            sessionId = $"session-{DateTime.Now.Ticks}";
            Console.WriteLine($"Created new session ID: {sessionId}");
            McpBlobServer.CurrentSession.SessionId = sessionId;
        }

        await mcpServer.RunAsync(ct);
    });

app.Run();


[McpServerToolType]
public class LearnFromYourMistakesTool
{
    [McpServerTool, Description("Before callint this tool you should prepare a summary with the list of all the mistakes you did in this chat sesssion and send it to this tool, and prepare a minispec to demonstrate that you learned from your mistakes and never do them again.")]
    public static string LearnFromYourMistakes(string mistakesSummary)
    {
        // This is a placeholder for the actual implementation of learning from mistakes.
        // In a real-world scenario, you would implement logic to analyze the mistakes and generate a summary.
        Console.WriteLine($"Learning from mistakes: {mistakesSummary}");
        
        return "ok thank you";//; "summarize all the mistakes you did in this session when you failed to achieve what the user wanted, or you created a coding mistake. Create a minispec that helps you not to fall in the same mistakes again. then invoke the ";
    }
}


[McpServerToolType]
public class EntraSignInUrlTool
{
    [McpServerTool, Description("Returns the Microsoft Entra (Azure AD) sign-in URL for authentication")]
    public static string GetEntraSignInUrl()
    {
        // Get the session ID from our static class
        var sessionId = McpBlobServer.CurrentSession.SessionId;
        
        if (string.IsNullOrEmpty(sessionId))
        {
            return "Error: No session ID available. Please refresh the connection.";
        }

        var tenantId = AppSettings.Config["AzureAd:TenantId"];
        var clientId = AppSettings.Config["AzureAd:ClientId"];
        var instance = AppSettings.Config["AzureAd:Instance"] ?? "https://login.microsoftonline.com/";
        var redirectUri = "http://localhost:3001/callback";
        
        // Make sure the scope parameter is properly formatted and encoded
        var scope = Uri.EscapeDataString("openid profile email offline_access");
        
        Console.WriteLine($"Generating sign-in URL with session ID: {sessionId}");
        
        return $"{instance}{tenantId}/oauth2/v2.0/authorize" + 
               $"?client_id={clientId}" + 
               $"&response_type=code" + 
               $"&redirect_uri={Uri.EscapeDataString(redirectUri)}" + 
               $"&response_mode=query" + 
               $"&state={sessionId}" +
               $"&scope={scope}";
    }
}

[McpServerToolType]
public class ToAzureBlobTool
{
    [McpServerTool, Description("stores the chat history in a file in a blog storage")]
    public static async Task<string> ToBlob(string chatHistory) 
    {
        var config = AppSettings.Config;
        
        string filename = $"chatHistory_{DateTime.Now.ToString("MM-dd-yy-hh-mm-ss")}.txt";
        
        // Get storage configuration from appsettings.json
        var storageAccountName = config["AzureStorageConfig:AccountName"] ?? throw new InvalidOperationException("Storage account name not configured");
        var containerName = config["AzureStorageConfig:ContainerName"] ?? throw new InvalidOperationException("Container name not configured");
        
        // Get authentication parameters from config
        var managedIdentityClientId = config["AzureAd:ClientCredentials:0:ManagedIdentityClientId"];
        var tenantId = config["AzureAd:TenantId"];
        var clientId = config["AzureAd:ClientId"];
        
        string audience = "api://AzureADTokenExchange";
        
        var miCredential = new ManagedIdentityCredential(managedIdentityClientId);

        ClientAssertionCredential assertion = new(
            tenantId,
            clientId,
            async (token) =>
            {
                // fetch Managed Identity token for the specified audience
                var tokenRequestContext = new Azure.Core.TokenRequestContext(new[] { $"{audience}/.default" });
                var accessToken = await miCredential.GetTokenAsync(tokenRequestContext).ConfigureAwait(false);
                return accessToken.Token;
            });


        // Construct the blob container endpoint from the arguments.
        string containerEndpoint = string.Format("https://{0}.blob.core.windows.net/{1}",
                                                storageAccountName,
                                                containerName);

        var containerClient = new BlobContainerClient(new Uri(containerEndpoint), assertion);
        await containerClient.CreateIfNotExistsAsync(PublicAccessType.None);
        Console.WriteLine($"Blob container '{containerName}' is ready");
        
        // Get the blob client for the file
        BlobClient blobClient = containerClient.GetBlobClient(filename);

        // Upload the string content directly
        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(chatHistory));
        await blobClient.UploadAsync(stream, overwrite: true);
        
        return $"Chat history saved to blob: {filename} in container: {containerName}";
    }
}

namespace McpBlobServer
{
    public static class CurrentSession
    {
        public static string SessionId { get; set; } = string.Empty;
    }
}

